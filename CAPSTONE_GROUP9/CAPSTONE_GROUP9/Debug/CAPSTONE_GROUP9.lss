
AVRASM ver. 2.2.8  C:\Users\silas\Desktop\AVR Proj\CAPSTONE_GROUP9\CAPSTONE_GROUP9\main.asm Mon Dec 12 15:40:04 2022

[builtin](2): Including file 'D:/AVRStudio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m328Pdef.inc'
[builtin](2): Including file 'D:/AVRStudio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m328Pdef.inc'
                                 
                                 //LCD COMMANDS
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #define _M328PDEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega328P
                                 #pragma AVRPART ADMIN PART_NAME ATmega328P
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x0f
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1B	= 6	; 
                                 .equ	FOC1A	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 ;.equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register
                                 .equ	ISC00	= 0	; External Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; External Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; External Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; External Interrupt Sense Control 1 Bit 1
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - Clock Prescale Register
                                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                                 
                                 ; SPMCSR - Store Program Memory Control and Status Register
                                 .equ    SELFPRGEN = 0; Added for backwards compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read-While-Write section read enable
                                 .equ    SIGRD   = 5 ; Signature Row Read
                                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; 
                                 .equ	IVSEL	= 1	; 
                                 .equ	PUD	= 4	; 
                                 .equ	BODSE	= 5	; BOD Sleep Enable
                                 .equ	BODS	= 6	; BOD Sleep
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	EXTREF	= EXTRF	; For compatibility
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select Bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select Bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select Bit 2
                                 
                                 ; GPIOR2 - General Purpose I/O Register 2
                                 .equ	GPIOR20	= 0	; 
                                 .equ	GPIOR21	= 1	; 
                                 .equ	GPIOR22	= 2	; 
                                 .equ	GPIOR23	= 3	; 
                                 .equ	GPIOR24	= 4	; 
                                 .equ	GPIOR25	= 5	; 
                                 .equ	GPIOR26	= 6	; 
                                 .equ	GPIOR27	= 7	; 
                                 
                                 ; GPIOR1 - General Purpose I/O Register 1
                                 .equ	GPIOR10	= 0	; 
                                 .equ	GPIOR11	= 1	; 
                                 .equ	GPIOR12	= 2	; 
                                 .equ	GPIOR13	= 3	; 
                                 .equ	GPIOR14	= 4	; 
                                 .equ	GPIOR15	= 5	; 
                                 .equ	GPIOR16	= 6	; 
                                 .equ	GPIOR17	= 7	; 
                                 
                                 ; GPIOR0 - General Purpose I/O Register 0
                                 .equ	GPIOR00	= 0	; 
                                 .equ	GPIOR01	= 1	; 
                                 .equ	GPIOR02	= 2	; 
                                 .equ	GPIOR03	= 3	; 
                                 .equ	GPIOR04	= 4	; 
                                 .equ	GPIOR05	= 5	; 
                                 .equ	GPIOR06	= 6	; 
                                 .equ	GPIOR07	= 7	; 
                                 
                                 ; PRR - Power Reduction Register
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEARH - EEPROM Address Register High Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select reset vector
                                 .equ	BOOTSZ0	= 1	; Select boot size
                                 .equ	BOOTSZ1	= 2	; Select boot size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog Timer Always On
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	DWEN	= 6	; debugWIRE Enable
                                 .equ	RSTDISBL	= 7	; External reset disable
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x08ff
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	PCI0addr	= 0x0006	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0008	; Pin Change Interrupt Request 0
                                 .equ	PCI2addr	= 0x000a	; Pin Change Interrupt Request 1
                                 .equ	WDTaddr	= 0x000c	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x000e	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x0010	; Timer/Counter2 Compare Match A
                                 .equ	OVF2addr	= 0x0012	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0014	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0016	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0018	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x001a	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x001c	; TimerCounter0 Compare Match A
                                 .equ	OC0Baddr	= 0x001e	; TimerCounter0 Compare Match B
                                 .equ	OVF0addr	= 0x0020	; Timer/Couner0 Overflow
                                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                                 .equ	URXCaddr	= 0x0024	; USART Rx Complete
                                 .equ	UDREaddr	= 0x0026	; USART, Data Register Empty
                                 .equ	UTXCaddr	= 0x0028	; USART Tx Complete
                                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	TWIaddr	= 0x0030	; Two-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0032	; Store Program Memory Read
                                 
                                 .equ	INT_VECTORS_SIZE	= 52	; size in words
                                 
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 .EQU CLR_SCRN = 0X01	//CLEAR LCD SCREEN
                                 .EQU CURSRGHT = 0X06	//SHIFT THE CURSOR RIGHT
                                 .EQU SHFTLEFT = 0X07	//SHIFT THE DISPLAY LEFT
                                 .EQU TOP_CELL = 0X80	//1ST ROW FIRST CELL
                                 .EQU BOT_CELL = 0XC0	//2ND ROW, FIRST CELL
                                 
                                 //SCORE RAM
                                 .EQU HUNDREDS = $100	;memory location for hundred place
                                 .EQU TENS = $102		;memory location for tens place
                                 .EQU ONES = $103		;memory location for ones place
                                 
                                 //CLOCK CONFIG
                                 .EQU CLK = (1<<WGM12 | 1<<CS12)	//CTC MODE (PAGE 297-298) WITH PRESCALE 256
                                 
                                 //LCD MNUEMONICS
                                 .EQU LCD_DPRT = PORTD	;LCD DATA PORT
                                 .EQU LCD_DDDR = DDRD	;LCD DATA DDR
                                 .EQU LCD_DPIN = PIND	;LCD DATA PIN
                                 
                                 .EQU LCD_CPRT = PORTB	;LCD COMMANDS PORT
                                 .EQU LCD_CDDR = DDRB	;LCD COMMANDS DDR
                                 .EQU LCD_CPIN = PINB	;LCD COMMANDS PIN
                                 
                                 .EQU LCD_RS = 0			;LCD RS
                                 .EQU LCD_RW = 1			;LCD RW
                                 .EQU LCD_EN = 2			;LCD EN
                                 
                                 //MACROS
                                 .MACRO OUTI
                                 	LDI R17, @1
                                 	OUT @0, R17
                                 .ENDMACRO
                                 
                                 //OUTPUTS DATA THROUGH R20
                                 .MACRO WRITE
                                 	LDI R20, @1
                                 	CALL @0
                                 .ENDMACRO
                                 
                                 //GPR JOBS
                                 /*
                                 R16 = INIT REG - MSG POINTER
                                 R17 = OUT REG & SUBROUTINE REG
                                 R18 = HIGH SCORE REG
                                 R19 = BIRD LOCATION REG (1=HIGH, 0=LOW)
                                 R20 = COMMANDS AND DATA WRITES
                                 R21 = OBJ COUNTER
                                 R22 = EOR BIRD REG & COPY REG
                                 R23 = 
                                 R24 = TOP BUTTON (SWITCH MENU)
                                 R25 = 
                                 R26 = XL - ROTATE TOP RIGHT
                                 R27 = XH - ROTATE TOP LEFT
                                 R28 = YL - ROTATE BOTTOM RIGHT
                                 R29 = YH - ROTATE BOTTOM LEFT
                                 R30 = ZL - EEPROM & FRAME RATE LOW
                                 R31 = ZH - EEPROM & FRAME RATE HIGH
                                 */
                                 
                                 //INIT EEPROM:
                                 .ESEG
                                 .ORG $0050
000050 00                        HIGH_SCORE:	.DB	0x00	//INITIALIZE HIGH SCORE TO 0
                                 .CSEG	;return to code memory
                                 
                                 //INTERRUPT VECTOR TABLE
                                 .ORG $0000								// LOCATION FOR INTERRUPT RESET LOCATION (TABLE 10.1 IN TBOOK)
000000 940c 0100                 	JMP MAIN
                                 .ORG $0002								//LOCATION FOR EXT INT 0 (TABLE 10.1 IN TBOOK)
000002 940c 030a                 	JMP BOTTOM_BUTTON
                                 .ORG $0004								//LOCATION FOR EXT INT 1 (TABLE 10.1 IN TBOOK)
000004 940c 0308                 	JMP TOP_BUTTON
                                 .ORG $0016								//COMPARE A TIMER 1 MATCH(TABLE 10.1 IN TBOOK)
000016 c2fb                      	RJMP TIMEOUT
                                 
                                 .ORG $0100
                                 MAIN:
                                 	//CONFIGURATION PHASE - RUNS ONCE
                                 	//INIT STACK
000100 e008                      	LDI R16, HIGH(RAMEND)
000101 bf0e                      	OUT SPH, R16
000102 ef0f                      	LDI R16, LOW(RAMEND)
000103 bf0d                      	OUT SPL, R16
                                 
                                 	//INIT I/O
000104 ef00                      	LDI R16, 0XF0
000105 b90a                      	OUT LCD_DDDR, R16		;LCD DATA PORT OUTPUT - HIGH NIBBLE, LOW NIBBLE INPUT
000106 9502                      	SWAP R16
000107 b90b                      	OUT LCD_DPRT, R16		;PORT D LOW NIBBLE PULLUP ENABLE, INIT OUTPUTS TO 0
000108 b904                      	OUT LCD_CDDR, R16		;LCD COMMAND PORT OUTPUT - LOW NIBBLE
                                 
                                 	//CONFIGURE INITIAL TIMER/INTERRUPT BEHAVIORS
000109 2700                      	CLR R16
00010a bd06                      	OUT TCNT0, R16
00010b bd04                      	OUT TCCR0A, R16					//NORMAL MODE
00010c 9300 0080                 	STS TCCR1A, R16					//NORMAL OPERATION
00010e 9300 0081                 	STS TCCR1B, R16					//TIMER OFF
000110 e00a                      	LDI R16, (1<<ISC01 | 1<<ISC11)	//CONFIGURE BUTTONS FOR FALLING EDGE INTERRUPTS
000111 9300 0069                 	STS EICRA, R16
000113 e002                      	LDI R16, 1<<INT1				//ENABLE EXTERNAL INTERRUPT 1, TOP BUTTON.
000114 bb0d                      	OUT EIMSK, R16
000115 9478                      	SEI								//GLOBAL INTERRUPTS ENABLED
                                 	
                                 	
                                 	//BEGIN CONFIGURING THE LCD
000116 982a                      	CBI LCD_CPRT, LCD_EN	;LCD_EN = 0
000117 940e 027e                 	CALL DELAY_2MS			;WAIT FOR POWER ON
000119 e343
00011a 940e 025d                 	WRITE CMD, 0x33			;INIT LCD 4BIT MODE
00011c 940e 027e                 	CALL DELAY_2MS
00011e e342
00011f 940e 025d                 	WRITE CMD, 0x32			;INIT LCD 4BIT MODE
000121 940e 027e                 	CALL DELAY_2MS
000123 e248
000124 940e 025d                 	WRITE CMD, 0X28			//5X7 MATRIX, 2 LINES
000126 940e 027e                 	CALL DELAY_2MS
000128 e04e
000129 940e 025d                 	WRITE CMD, 0X0E			//DISPLAY ON CURSOR ON
00012b 940e 027e                 	CALL DELAY_2MS
                                 
                                 	//CREATE CUSTOM CHARS
                                     //INITIALIZE AND DRAW THE ORIGINAL BIRD TO CGRAM (accessible with WRITE DATA, 0)
00012d e440
00012e 940e 025d                     WRITE CMD, 0x40 //SET ADDRESS TO FIRST CGRAM ADDR.
000130 940e 027e                     CALL DELAY_2MS
000132 e04e
000133 940e 025f                     WRITE DATA, 0x0E //01110: ADD IN EACH BIT ROW OF THE 5X7 MATRIX FOR CUSTOM CHARS
000135 940e 027e                     CALL DELAY_2MS 
000137 e04d
000138 940e 025f                     WRITE DATA, 0x0D //01101
00013a 940e 027e                     CALL DELAY_2MS
00013c e04e
00013d 940e 025f                     WRITE DATA, 0x0E //01110
00013f 940e 027e                     CALL DELAY_2MS 
000141 e046
000142 940e 025f                     WRITE DATA, 0x06 //00110
000144 940e 027e                     CALL DELAY_2MS
000146 e14e
000147 940e 025f                     WRITE DATA, 0x1E //11110
000149 940e 027e                     CALL DELAY_2MS 
00014b e14e
00014c 940e 025f                     WRITE DATA, 0x1E //11110
00014e 940e 027e                     CALL DELAY_2MS
000150 e04c
000151 940e 025f                     WRITE DATA, 0x0C //01100
000153 940e 027e                     CALL DELAY_2MS
                                 
                                     //DRAW THE LOWER PIPE TO CGRAM PART 2 (accessible with WRITE DATA, 1)
000155 e448
000156 940e 025d                     WRITE CMD, 0x48 //SET ADDRESS TO SECOND CGRAM ADDR.
000158 940e 027e                     CALL DELAY_2MS
00015a e04e
00015b 940e 025f                     WRITE DATA, 0x0E //01110: ADD IN EACH BIT ROW OF THE 5X7 MATRIX FOR CUSTOM CHARS
00015d 940e 027e                     CALL DELAY_2MS 
00015f e04e
000160 940e 025f                     WRITE DATA, 0x0E //01110
000162 940e 027e                     CALL DELAY_2MS
000164 e04e
000165 940e 025f                     WRITE DATA, 0x0E //01110
000167 940e 027e                     CALL DELAY_2MS 
000169 e04e
00016a 940e 025f                     WRITE DATA, 0x0E //01110
00016c 940e 027e                     CALL DELAY_2MS
00016e e04e
00016f 940e 025f                     WRITE DATA, 0x0E //01110
000171 940e 027e                     CALL DELAY_2MS 
000173 e14f
000174 940e 025f                     WRITE DATA, 0x1F //11111
000176 940e 027e                     CALL DELAY_2MS
000178 e14f
000179 940e 025f                     WRITE DATA, 0x1F //11111
00017b 940e 027e                     CALL DELAY_2MS
                                 
                                     //DRAW THE UPPER PIPE TO CGRAM PART 3 (accessible with WRITE DATA, 2)
00017d e541
00017e 940e 025d                     WRITE CMD, 0x51 //SET ADDRESS TO THIRD CGRAM ADDR.
000180 940e 027e                     CALL DELAY_2MS
000182 e14f
000183 940e 025f                     WRITE DATA, 0x1F //11111: ADD IN EACH BIT ROW OF THE 5X7 MATRIX FOR CUSTOM CHARS
000185 940e 027e                     CALL DELAY_2MS 
000187 e14f
000188 940e 025f                     WRITE DATA, 0x1F //11111
00018a 940e 027e                     CALL DELAY_2MS
00018c e04e
00018d 940e 025f                     WRITE DATA, 0x0E //01110
00018f 940e 027e                     CALL DELAY_2MS 
000191 e04e
000192 940e 025f                     WRITE DATA, 0x0E //01110
000194 940e 027e                     CALL DELAY_2MS
000196 e04e
000197 940e 025f                     WRITE DATA, 0x0E //01110
000199 940e 027e                     CALL DELAY_2MS 
00019b e04e
00019c 940e 025f                     WRITE DATA, 0x0E //01110
00019e 940e 027e                     CALL DELAY_2MS
0001a0 e04e
0001a1 940e 025f                     WRITE DATA, 0x0E //01110
0001a3 940e 027e                     CALL DELAY_2MS
                                 
                                 	//GAME CODE LOOP\\
                                 STARTSCREEN:
                                 	//REFRESH THE GAME VIEW
0001a5 e041
0001a6 940e 025d                 	WRITE CMD, CLR_SCRN		//CLEAR SCREEN
0001a8 940e 027e                 	CALL DELAY_2MS			
0001aa e046
0001ab 940e 025d                 	WRITE CMD, CURSRGHT		//SHIFT CURSOR RIGHT
0001ad 940e 027e                 	CALL DELAY_2MS
                                 
                                 	//WRITE GAME NAME TO LCD
0001af e0f6                      	LDI ZH, HIGH(GAME_STR<<1)
0001b0 e8ec                      	LDI ZL, LOW(GAME_STR<<1)
0001b1 940e 02a1                 	CALL WRITE_STR
                                 
                                 	//WRITE "HIGH SCORE:" TO LCD
0001b3 ec40
0001b4 940e 025d                 	WRITE CMD, BOT_CELL		//FORCE CURSOR TO 2ND LINE
0001b6 940e 027e                 	CALL DELAY_2MS			//WAIT 2 ms
0001b8 e0f6                      	LDI ZH, HIGH(SCORE_STR<<1)
0001b9 e9e8                      	LDI ZL, LOW(SCORE_STR<<1)
0001ba 940e 02a1                 	CALL WRITE_STR
                                 
                                 	//GET THE CURRENT HIGH SCORE FROM EEPROM
0001bc e0f0                      	LDI ZH, HIGH(HIGH_SCORE)
0001bd e5e0                      	LDI ZL, LOW(HIGH_SCORE)
0001be 940e 0286                 	CALL LOAD_FROM_ROM			//LOAD R18 WITH EEPROM HIGH SCORE
                                 
                                 	/*
                                 	//REINIT EEPROM TO 0 -UNCOMMENT TO REINIT EEPROM TO 0
                                 	CLR R18
                                 	CALL STORE_TO_ROM
                                 	RELOAD:	RJMP RELOAD
                                 	*/
                                 
                                 	//CONVERT HS IN R18 INTO ASCII
                                 		//ONES PLACE
0001c0 940e 0295                 	CALL MOD10		//R18 = QUOTIENT, R20 = REMAINDER
0001c2 6340                      	ORI R20, 0X30	//SET ASCII BITS FOR 3DIG HIGH SCORE
0001c3 9340 0103                 	STS ONES, R20
                                 		//TENS
0001c5 940e 0295                 	CALL MOD10
0001c7 6340                      	ORI R20, 0X30
0001c8 9340 0102                 	STS TENS, R20
                                 		//HUNDREDS
0001ca 940e 0295                 	CALL MOD10
0001cc 6340                      	ORI R20, 0X30
0001cd 9340 0100                 	STS HUNDREDS, R20
                                 
                                 	//WRITE TO SCREEN
0001cf 9140 0100                 	LDS R20, HUNDREDS
0001d1 940e 025f                 	CALL DATA
0001d3 9140 0102                 	LDS R20, TENS
0001d5 940e 025f                 	CALL DATA
0001d7 9140 0103                 	LDS R20, ONES
0001d9 940e 025f                 	CALL DATA
                                 
                                 	//ASSURE THAT THE BUTTON HAS NO FLOATING VALUE
0001db 2788                      	CLR R24
                                 	WAITFORGAME:			//ONLY ADVANCE TO GAME WHEN BUTTON IS PRESSED
0001dc 2388                      		TST R24
0001dd f3f1                      		BREQ WAITFORGAME
0001de 2788                      		CLR R24				//RESET BUTTON REG
                                 	
                                 GAME_INIT:
                                 	//DISBALE SKIP
0001df e011
0001e0 bb1d                      	OUTI EIMSK, 1<<INT0
                                 	//CLEAR SCREEN
0001e1 e041
0001e2 940e 025d                 	WRITE CMD, CLR_SCRN
0001e4 940e 027e                 	CALL DELAY_2MS
0001e6 e046
0001e7 940e 025d                 	WRITE CMD, CURSRGHT
0001e9 940e 027e                 	CALL DELAY_2MS
                                 
                                 	//CONFIGURE STARTUP REGISTERS
0001eb 2722                      	CLR R18					//INIT SCORE TO 0
0001ec 2733                      	CLR R19					//SET BIRD TO BOTTOM ROW
0001ed e055                      	LDI R21, 5				//CONFIGURE INIT PIPE SPAWN RATE (N * TIMER INTERRUPTS)
0001ee 27bb                      	CLR XH
0001ef 27aa                      	CLR XL
0001f0 27dd                      	CLR YH
0001f1 27cc                      	CLR YL
                                 	//CONFIG TIMER1
0001f2 2700                      	CLR R16
0001f3 9300 0085                 	STS TCNT1H, R16		//LOADING 0 CREATES LONGEST DELAY
0001f5 9300 0084                 	STS TCNT1L, R16
0001f7 e002                      	LDI R16, 1<<OCIE1A	//ENABLE OUTPUT COMPARE INERRUPTS
0001f8 9300 006f                 	STS TIMSK1, R16
                                 	
                                 	//CREATE INIT_DELAY 1 SEC
0001fa eff4                      	LDI ZH, HIGH(62500)	//TAKES 250 INTERRUPTS TO SET TO 0
0001fb e2e4                      	LDI ZL, LOW(62500)
0001fc 93f0 0089                 	STS OCR1AH, ZH
0001fe 93e0 0088                 	STS OCR1AL, ZL
                                 
000200 ec40
000201 940e 025d                 	WRITE CMD, BOT_CELL
000203 940e 027e                 	CALL DELAY_2MS
000205 e040
000206 940e 025f                 	WRITE DATA, 0			//DRAW BIRD
                                 
000208 940e 027e                 	CALL DELAY_2MS
                                 
                                 	//START THE TIMERS
00020a e00c                      	LDI R16, CLK
00020b 9300 0081                 	STS TCCR1B, R16			//CTC MODE WITH PRESCALE 256
00020d e001                      	LDI R16, 1				//NO PRESCALE
00020e bd05                      	OUT TCCR0B, R16
                                 	
                                 GAME_LOOP:
                                 	//CHECK FOR FAILURE IN INTERRUPTS, EXIT IF COLLISION OCCURS OR BUTTON IS PRESSED
00020f 2388                      	TST R24
000210 f3f1                      	BREQ GAME_LOOP
                                 
                                 GAME_OVER:
                                 	//DISABLE GAME INTERRUPTS
000211 e002                      	LDI R16, 1<<INT1	//DISABLE EXTERNAL INTERUPT 0; LEAVE TOP ENABLED
000212 bb0d                      	OUT EIMSK, R16
                                 	//STOP TIMER + TIMER INTERRUPTS
000213 2700                      	CLR R16
000214 9300 0081                 	STS TCCR1B, R16		//CLOCK OFF
000216 9300 006f                 	STS TIMSK1, R16		//DISABLE TIMER1 INTERRUPTS
                                 
                                 	//COPY PLAYER SCORE TO R16
000218 2f62                      	MOV R22, R18
                                 
                                 	//HANDLE PLAYER SCORE
                                 		//ONES
000219 940e 0295                 	CALL MOD10		//R18 = QUOTIENT, R20 = REMAINDER
00021b 6340                      	ORI R20, 0X30	//SET ASCII BITS FOR 3DIG HIGH SCORE
00021c 9340 0103                 	STS ONES, R20
                                 		//TENS
00021e 940e 0295                 	CALL MOD10
000220 6340                      	ORI R20, 0X30
000221 9340 0102                 	STS TENS, R20
                                 		//HUNDREDS
000223 940e 0295                 	CALL MOD10
000225 6340                      	ORI R20, 0X30
000226 9340 0100                 	STS HUNDREDS, R20
                                 
                                 	//DISPLAY PLAYER SCORE
000228 e041
000229 940e 025d                 	WRITE CMD, CLR_SCRN		//CLEAR SCREEN
00022b 940e 027e                 	CALL DELAY_2MS			//WAIT 2 ms
00022d e046
00022e 940e 025d                 	WRITE CMD, CURSRGHT		//SHIFT CURSOR RIGHT
                                 
                                 	//WRITE "GAME OVER"
000230 e0f6                      	LDI ZH, HIGH(END_GAME_STR<<1)
000231 eae4                      	LDI ZL, LOW(END_GAME_STR<<1)
000232 940e 02a1                 	CALL WRITE_STR
                                 	
                                 	//WRITE "YOUR SCORE:" TO LCD
000234 ec40
000235 940e 025d                 	WRITE CMD, BOT_CELL			//FORCE CURSOR TO 2ND LINE
000237 940e 027e                 	CALL DELAY_2MS			//WAIT 2 ms
000239 e0f6                      	LDI ZH, HIGH(END_GAME_SCORE_STR<<1)
00023a eaee                      	LDI ZL, LOW(END_GAME_SCORE_STR<<1)
00023b 940e 02a1                 	CALL WRITE_STR
                                 	
                                 	//WRITE SCORE TO SCREEN	- SCORE = HOW MANY OBSTACLES GENERATED BEFORE LOSS
00023d 9140 0100                 	LDS R20, HUNDREDS
00023f 940e 025f                 	CALL DATA
000241 9140 0102                 	LDS R20, TENS
000243 940e 025f                 	CALL DATA
000245 9140 0103                 	LDS R20, ONES
000247 940e 025f                 	CALL DATA
                                 
                                 	//COLLECT HIGH SCORE
000249 e0f0                      	LDI ZH, HIGH(HIGH_SCORE)
00024a e5e0                      	LDI ZL, LOW(HIGH_SCORE)
                                 	//R22 = NEW SCORE, LOAD OLD INTO R18
00024b 940e 0286                 	CALL LOAD_FROM_ROM
00024d 2788                      	CLR R24				//RESET BUTTON REG
                                 
                                 	//COMPARE SCORES
00024e 1762                      	CP R22, R18
00024f f018                      	BRLO GAME_OVER_WAIT	//NEW SCORE WAS NOT GREATER
                                 	//REWRITE EEPROM WITH NEW SCORE
000250 2f26                      	MOV R18, R22
000251 940e 028d                 	CALL STORE_TO_ROM
                                 	
                                 	//WAIT AT END SCREEN BEFORE RETURNING TO START
                                 	GAME_OVER_WAIT:
000253 2388                      		TST R24
000254 f3f1                      		BREQ GAME_OVER_WAIT
000255 cf4f                      		RJMP STARTSCREEN
                                 	
                                 //SUBROUTINES SECTION\\
                                 
                                 GENERATE_PIPE:
                                 	//FIRST, GET A RANDOM NUMBER (1 OR 0)
000256 b506                      	IN R16, TCNT0
000257 7001                      	ANDI R16, 1	//GET LSB
000258 f411                      	BRNE DRAW_HIGH
                                 	//APPEND THE 1 TO THE ROTATING REGISTERS LOW EDGE
                                 	DRAW_LOW:
000259 60c1                      		ORI YL, 1
00025a c001                      		RJMP DONE
                                 	DRAW_HIGH:
00025b 60a1                      		ORI XL, 1
                                 	DONE:
00025c 9508                      	RET
                                 
                                 /////////////////////////////////////////////////////
                                 CMD:
00025d 9828                      	CBI LCD_CPRT, LCD_RS		//RS = 0 FOR COMMAND
00025e c002                      	RJMP LCD_SEND
                                 
                                 DATA:
00025f 9a28                      	SBI LCD_CPRT, LCD_RS		//RS = 1 FOR DATA
000260 c000                      	RJMP LCD_SEND
                                 
                                 //SENDS DATA/CMD TO LCD DISPLAY
                                 LCD_SEND:
000261 940e 0267                 	CALL LCD_SEND_2
000263 9542                      	SWAP R20
000264 940e 0267                 	CALL LCD_SEND_2
000266 9508                      	RET
                                 	LCD_SEND_2:
000267 2f14                      		MOV R17, R20
000268 7f10                      		ANDI R17,0XF0	//send the high nibble
000269 601f                      		ORI R17,0X0F	//KEEP PULLUPS ACTIVE
00026a b91b                      		OUT LCD_DPRT, R17
00026b 9829                      		CBI LCD_CPRT,	LCD_RW	//RW=0 FOR WRITE
00026c 9a2a                      		SBI LCD_CPRT, LCD_EN	//EN=1 FOR PULSE
00026d 940e 0273                 		CALL SDELAY
00026f 982a                      		CBI LCD_CPRT, LCD_EN	//FALLING EDGE
000270 940e 0276                 		CALL DELAY_100us
000272 9508                      		RET
                                 /////////////////////////////////////////////////////
                                 SDELAY:
000273 0000                      	NOP
000274 0000                      	NOP
000275 9508                      	RET
                                 
                                 DELAY_100us:
000276 931f                      	PUSH R17	;STORE VALUE OF R17
000277 e718                      	LDI R17, 120
000278 940e 0273                 	DR0: CALL SDELAY
00027a 951a                      		DEC R17
00027b f7e1                      		BRNE DR0
00027c 911f                      	POP R17		;RELOAD R17
00027d 9508                      	RET
                                 
                                 DELAY_2MS:
00027e 931f                      	PUSH R17
00027f e114                      	LDI R17, 20
000280 940e 0276                 	LDR0: CALL DELAY_100us
000282 951a                      		DEC R17
000283 f7e1                      		BRNE LDR0
000284 911f                      	POP R17
000285 9508                      	RET
                                 ////////////////////////////////////////////////////
                                 //LOAD R18 WITH THE CONTENTS OF LOCATION Z OF EEPROM
                                 LOAD_FROM_ROM:
000286 99f9                      	SBIC EECR, EEPE
000287 cffe                      	RJMP LOAD_FROM_ROM
000288 bdf2                      	OUT EEARH, ZH
000289 bde1                      	OUT EEARL, ZL
00028a 9af8                      	SBI EECR, EERE	;SET READ ENABLE TO ONE
00028b b520                      	IN R18, EEDR	;LOAD EEPROM DATA REG TO R18
00028c 9508                      	RET
                                 //STORE R18 INTO LOCATION Z OF EEPROM
                                 STORE_TO_ROM:
00028d 99f9                      	SBIC EECR, EEPE
00028e cffe                      	RJMP STORE_TO_ROM
00028f bdf2                      	OUT EEARH, ZH
000290 bde1                      	OUT EEARL, ZL
000291 bd20                      	OUT EEDR, R18
000292 9afa                      	SBI EECR, EEMPE	;SET MASTER WRITE ENABLE TO ONE
000293 9af9                      	SBI EECR, EEPE	;WRITE EEDR INTO EEPROM
000294 9508                      	RET
                                 
                                 //Divide a number in R18 by 10, R18 is the quotient, R20 is remainder
                                 MOD10:
000295 e040                      	LDI R20, 0x00		; load 0 into GPR 20
000296 e00a                      	LDI R16, 10			; used for subtraction of 10
                                 	divide: 
000297 9543                      		INC R20			; Increment R20 to show one subtraction step
000298 1b20                      		SUB R18, R16	; Number - 10, store result in R16
000299 f7e8                      		BRSH divide		; branch if the number is not negative (Carry bit returns 1 if rollunder 0)
                                 	
00029a 954a                      	DEC R20				; After the loop above, the output would be 1 more than intended
00029b 0f20                      	ADD R18, R16		; Return the remainder from the subtractions by undoing the last subtraction!
                                 
00029c 2f54                      	MOV R21, R20		;move the quotient into temp GPR
00029d 2f42                      	MOV R20, R18		;move remainder into R20
00029e 2f25                      	MOV R18, R21		;Move quotient into R18
00029f 2755                      	CLR R21				;Clean Temp GPR
0002a0 9508                      	RET					;return to main program
                                 
                                 //WRITES A STRING TO THE LCD BASED ON THE Z LOCATION
                                 WRITE_STR:
0002a1 9145                      	LPM R20, Z+
0002a2 3040                      	CPI R20, 0
0002a3 f019                      	BREQ MSGEND //JUMP TO END WHEN 0 IS MET
0002a4 940e 025f                 	CALL DATA
0002a6 cffa                      	RJMP WRITE_STR
                                 	MSGEND:
0002a7 9508                      	RET
                                 
                                 //ONLY HAPPENS IF NO COLLISION OCCURED
                                 DRAW_ROWX:
0002a8 931f                      	PUSH R17	//STORE VALUE
0002a9 e840
0002aa 940e 025d                 	WRITE CMD, TOP_CELL
0002ac 940e 027e                 	CALL DELAY_2MS
                                 
0002ae e008                      	LDI R16, 8	//ROL FULL ROTATION FOR NO BIRD
0002af 9488                      	CLC
                                 	//DRAW BIRD FIRST IF THERES A BIRD IN X
0002b0 2333                      	TST R19
0002b1 f051                      	BREQ DRAW_PIPESX		//DRAWS BIRD IF 1=HIGH
                                 		
0002b2 e840
0002b3 940e 025d                 		WRITE CMD, TOP_CELL	//FIRST ROW TOP
0002b5 e040
0002b6 940e 025f                 		WRITE DATA, 0		//DRAW THE BIRD
0002b8 940e 0276                 		CALL DELAY_100us
0002ba 1fbb                      		ROL XH				//CLEARS THE BIRD FROM THE VECTOR
0002bb 950a                      		DEC R16				//DO ONE LESS ROTATION
                                 
                                 	//DRAW PIPES
                                 	DRAW_PIPESX:
                                 		LOOPXH: 
0002bc 1fbb                      			ROL XH
0002bd f020                      			BRCS PIPEXH	//DRAW A PIPE IF 1
                                 			SPACEXH:
0002be e240
0002bf 940e 025f                 				WRITE DATA, ' '
0002c1 c003                      				RJMP CHECKXH
                                 			PIPEXH:
0002c2 e042
0002c3 940e 025f                 				WRITE DATA, 2
                                 			CHECKXH: 
0002c5 950a                      			DEC R16
0002c6 f7a9                      			BRNE LOOPXH
0002c7 1fbb                      		ROL XH		//FULL RESET
0002c8 e008                      		LDI R16, 8	//RESET PIPE FULL ROTATION
0002c9 9488                      		CLC
                                 		LOOPXL:
0002ca 1faa                      			ROL XL
0002cb f020                      			BRCS PIPEXL	//DRAW A PIPE IF 1
                                 			SPACEXL:
0002cc e240
0002cd 940e 025f                 				WRITE DATA, ' '
0002cf c003                      				RJMP CHECKXL
                                 			PIPEXL:
0002d0 e042
0002d1 940e 025f                 				WRITE DATA, 2
                                 			CHECKXL: 
0002d3 950a                      			DEC R16
0002d4 f7a9                      			BRNE LOOPXL
0002d5 1faa                      		ROL XL
0002d6 911f                      	POP R17	//RESTORE VALUE
0002d7 9508                      	RET
                                 
                                 DRAW_ROWY:
0002d8 931f                      	PUSH R17	//STORE VALUE
0002d9 ec40
0002da 940e 025d                 	WRITE CMD, BOT_CELL
0002dc 940e 027e                 	CALL DELAY_2MS
0002de e008                      	LDI R16, 8	//ROL FULL ROTATION FOR NO BIRD
0002df 9488                      	CLC
                                 	//DRAW BIRD FIRST IF THERES A BIRD IN X
0002e0 2333                      	TST R19
0002e1 f441                      	BRNE DRAW_PIPESY		//DRAWS BIRD IF 0=LOW
                                 		
0002e2 ec40
0002e3 940e 025d                 		WRITE CMD, BOT_CELL	//FIRST ROW TOP
0002e5 e040
0002e6 940e 025f                 		WRITE DATA, 0		//DRAW THE BIRD
0002e8 1fdd                      		ROL YH				//CLEARS THE BIRD FROM THE VECTOR
0002e9 950a                      		DEC R16				//DO ONE LESS ROTATION
                                 
                                 	//DRAW PIPES
                                 	DRAW_PIPESY:
                                 		LOOPYH: 
0002ea 1fdd                      			ROL YH
0002eb f020                      			BRCS PIPEYH	//DRAW A PIPE IF 1
                                 			SPACEYH:
0002ec e240
0002ed 940e 025f                 				WRITE DATA, ' '
0002ef c003                      				RJMP CHECKYH
                                 			PIPEYH:
0002f0 e041
0002f1 940e 025f                 				WRITE DATA, 1
                                 			CHECKYH: 
0002f3 950a                      			DEC R16
0002f4 f7a9                      			BRNE LOOPYH
0002f5 1fdd                      		ROL YH
0002f6 e008                      		LDI R16, 8	//RESET PIPE FULL ROTATION
0002f7 9488                      		CLC
                                 		LOOPYL:
0002f8 1fcc                      			ROL YL
0002f9 f020                      			BRCS PIPEYL	//DRAW A PIPE IF 1
                                 			SPACEYL:
0002fa e240
0002fb 940e 025f                 				WRITE DATA, ' '
0002fd c003                      				RJMP CHECKYL
                                 			PIPEYL:
0002fe e041
0002ff 940e 025f                 				WRITE DATA, 1
                                 			CHECKYL: 
000301 940e 0276                 			CALL DELAY_100us
000303 950a                      			DEC R16
000304 f799                      			BRNE LOOPYL
000305 1fcc                      			ROL YL
000306 911f                      		POP R17	//RESTORE VALUE
000307 9508                      		RET
                                 
                                 ////////////////////////////////////////////////////////////
                                 TOP_BUTTON:
000308 9583                      	INC R24			//MOVES THROUGH PROGRAM
000309 9518                      	RETI
                                 
                                 BOTTOM_BUTTON:
00030a e061                      	LDI R22, 1
00030b 2736                      	EOR R19, R22	//CHANGE THE STATE OF R19 SO BIRD IS DRAWN EVERY FRAME ON CORRECT ROW
00030c 940e 02a8                 	CALL DRAW_ROWX	//QUICKLY REDRAW ROWS
00030e 940e 02d8                 	CALL DRAW_ROWY
000310 2788                      	CLR R24			//PROTECT AGAINST FALSE ENDS
000311 9518                      	RETI
                                 
                                 //TIMER1 OCA INTERRUPT
                                 TIMEOUT:
                                 	//DEC OBJ COUNTER
000312 955a                      	DEC R21
                                 	//SHIFT LCD DISPLAY LEFT
                                 	BACKEND:
000313 9488                      		CLC
000314 1faa                      		ROL XL
000315 1fbb                      		ROL XH
000316 9488                      		CLC
000317 1fcc                      		ROL YL
000318 1fdd                      		ROL YH
                                 	//GENERATE A PIPE IF OBSTACLE COUNTER REACHES 0
000319 2355                      	TST R21
00031a f4d1                      	BRNE COLLISION_CHECK
                                 	//INCREMENT THE SCORE
00031b 9523                      	INC R18
00031c 940e 0256                 	CALL GENERATE_PIPE
                                 	//CHECK BIRD LOCATION FOR CAMPING
00031e 2333                          TST R19
00031f f411                          BRNE RAND_HIGH
000320 2f5c                          MOV R21, YL
000321 c001                          RJMP RESET
                                     //SAMPLE FROM SAME ROW TO DETER "CAMPING" A ROW
                                     RAND_HIGH:
000322 2f5a                          MOV R21, XL
                                     RESET:
000323 705f                          ANDI R21, 0X0F    //SAMPLE LOWER NIBBLE, RANDOMIZE PIPE WIDTH
000324 6053                          ORI R21, 3        //MINIMUM PIPE RATE RANGE {3, 7, 11}
                                 	
000325 57e1                      	SUBI ZL, LOW(625)	//DECREMENT THE DELAY
000326 40f2                      	SBCI ZH, HIGH(625)	//TAKES THE CARRY AWAY AS NEEDED
                                 
                                 	//LOAD THE COUNTER REGISTERS
000327 2700                      	CLR R16
000328 9300 0081                 	STS TCCR1B, R16	//STOP THE COUNTER TEMPORARILY
00032a 93f0 0089                 	STS OCR1AH, ZH
00032c 93e0 0088                 	STS OCR1AL, ZL
00032e 9300 0085                 	STS TCNT1H, R16	//RESET TIMER
000330 9300 0084                 	STS TCNT1L, R16
000332 e00c                      	LDI R16, CLK	//ENABLE TIMER
000333 9300 0081                 	STS TCCR1B, R16
                                 
                                 	//COLLISION CHECK
                                 	COLLISION_CHECK:
000335 2f0b                      	MOV R16, XH	//COPY PIPE DATA
000336 2f1d                      	MOV R17, YH	
000337 2333                      	TST R19		//GET POSITION OF BIRB
000338 f019                      	BREQ CHECK_LOW
                                 	CHECK_HIGH:
000339 7800                      		ANDI R16, 0B10000000	//CHECK MSB FOR OBSTACLE, 0 IF NONE, 1 IF COLLIDE
00033a f029                      		BREQ NO_COLLIDE
00033b c002                      		RJMP COLLIDE
                                 	CHECK_LOW:
00033c 7810                      		ANDI R17, 0B10000000
00033d f011                      		BREQ NO_COLLIDE		//IF NOT EQUAL, END CHECK
00033e 9583                      	COLLIDE:	INC R24	    //SET R24 TO END GAME
00033f 9518                      				RETI		//END THE GAME WITHOUT REDRAW
                                 
                                 	//REDRAW THE GAME IF NO COLLISION OCCURED
                                 	NO_COLLIDE:
000340 940e 02a8                 		CALL DRAW_ROWX
000342 940e 02d8                 		CALL DRAW_ROWY
000344 2788                      		CLR R24
000345 9518                      		RETI
                                 
                                 ////////////////////////////////////////////////////////////
                                 //STRINGS TO DISPLAY
000346 4c53
000347 504f
000348 5950
000349 4220
00034a 5249
00034b 0042                      GAME_STR: .DB "SLOPPY BIRB",0
00034c 4948
00034d 4847
00034e 5320
00034f 4f43
000350 4552
000351 003a                      SCORE_STR: .DB "HIGH SCORE:",0
                                 //STRINGS TO DISPLAY AT GAME END
000352 4147
000353 454d
000354 4f20
000355 4556
000356 0052                      END_GAME_STR: .DB "GAME OVER",0
000357 4f59
000358 5255
000359 5320
00035a 4f43
00035b 4552


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega328P" register use summary:
x  :   0 y  :   0 z  :   1 r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16:  55 r17:  20 r18:  11 r19:   6 r20:  79 
r21:  10 r22:   5 r23:   0 r24:  10 r25:   0 r26:   6 r27:   6 r28:   6 
r29:   6 r30:  12 r31:  12 
Registers used: 15 out of 35 (42.9%)

"ATmega328P" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   1 adiw  :   0 and   :   0 
andi  :   5 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   4 break :   0 breq  :   8 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 brlt  :   0 brmi  :   0 
brne  :  10 brpl  :   0 brsh  :   1 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  : 125 cbi   :   4 cbr   :   0 
clc   :   6 clh   :   0 cli   :   0 cln   :   0 clr   :  16 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   1 cpc   :   0 
cpi   :   1 cpse  :   0 dec   :  10 eor   :   1 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   2 inc   :   4 jmp   :   3 
ld    :   0 ldd   :   0 ldi   :  87 lds   :   6 lpm   :   1 lsl   :   0 
lsr   :   0 mov   :  10 movw  :   0 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :   2 or    :   0 ori   :  10 out   :  17 pop   :   4 
push  :   4 rcall :   0 ret   :  12 reti  :   4 rjmp  :  14 rol   :  14 
ror   :   0 sbc   :   0 sbci  :   1 sbi   :   5 sbic  :   2 sbis  :   0 
sbiw  :   0 sbr   :   0 sbrc  :   0 sbrs  :   0 sec   :   0 seh   :   0 
sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   0 std   :   0 sts   :  23 
sub   :   1 subi  :   1 swap  :   2 tst   :   8 wdr   :   0 
Instructions used: 40 out of 113 (35.4%)

"ATmega328P" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0006ba   1178     46   1224   32768   3.7%
[.dseg] 0x000100 0x000100      0      0      0    2048   0.0%
[.eseg] 0x000050 0x000051      0      1      1    1024   0.1%

Assembly complete, 0 errors, 0 warnings
